snippet #!
	#!/usr/bin/env node
# module exports
snippet ex
	module.exports = ${1};
# require
snippet re
	${1:const} ${2} = require('${3:module_name}');
# EventEmitter
snippet on
	on('${1:event_name}', function(${2:stream}) {
	  ${3}
	});
snippet emit
	emit('${1:event_name}', ${2:args});
snippet once
	once('${1:event_name}', function(${2:stream}) {
	  ${3}
	});
# http. User js function snippet as handler
snippet http
	http.createServer(${1:handler}).listen(${2:port_number});
# net 
snippet net
	net.createServer(function(${1:socket}){
		${1}.on('data', function('data'){
		  ${2}
		]});
		${1}.on('end', function(){
		  ${3}
		});
	}).listen(${4:8124});
# Stream snippets
snippet pipe
	pipe(${1:stream})${2}
# Express snippets
snippet epget
	${1:app}.get('${2:/get}', ${3:function(req,res)}{
	${0}
	});
snippet eppost
	${1:app}.post('${2:/post}', ${3:function(req,res)}{
	${0}
	});
snippet epput
	${1:app}.put('${2:/put}', ${3:function(req,res)}{
	${0}
	});
snippet epdelete
	${1:app}.delete('${2:/delete}', ${3:function(req,res)}{
	${0}
	});
snippet eplisten
	${1:app}.listen(${2:8080});
# david add -2019-03-30
snippet addLis
	addListener('${1:event}', function(${2:}){
		${3:}
	});
snippet aget
	app.get('${1:path}', function(req, res, next){
		${2:}
	});
snippet alis
	app.listen(${1:3000}, ${2:function(){
		console.log("App server listening on port %d", app.address().port);
	}});
snippet apost
	app.post('${1:path}', function(req, res, next){
		${2:}
	});
snippet snotE
	assert.notEqual(${1:actual}, ${2:expected});
snippet sdeep 
	assert.deepEqual(${1:actual}, ${2:expected});
snippet seq
	assert.equal(${1:actual}, ${2:expected});
snippet ccCred
	crypto.createCredentials({key:${1:key}, cert:${2:cert}${3:, ca:[]});
snippet penv
	process.env.${1:VARIABLE}
snippet express
	var app = express.createServer();
	
	app.configure(function(){
		app.set('views', __dirname + '${1:/../views}');
		${2:app.use(connect.bodyDecoder());}
		${3:app.use(connect.methodOverride());}
		app.use(connect.compiler({ src: __dirname + '/../public', enable: ['less']  }));
		app.use(app.router);
		app.use(connect.staticProvider(__dirname + '${4:/../public'}));
	});
			
	app.configure('development', function(){
		app.use(connect.errorHandler({ dumpExceptions: true, showStack: true  })); 
	});
	
	app.configure('production', function(){
		app.use(connect.errorHandler()); 
	});
snippet filt
	filter(function(item){
		return ${1:false};
	});
snippet forEach
	forEach(function(${1:item},${2:index}){
		${3:}
	});
snippet freadFile
	fs.readFile('${1:filename}', function(err, data){
		${2: }
	});
snippet funlink
	fs.unlink('${1:location}', function(err){
		${2: }
	});
snippet fwatchFile
	fs.watchFile('${1:filename}', function(current, previous){
	});
snippet fwriteFile
	fs.writeFile('${1:filename}', ${2:data}, ${3:'utf8'}, function(err){
		${4: }
	});
snippet func
	function(${1:}){${2:}}
snippet cClient
	http.createClient(${1:80}, '${2:www.google.com}');
snippet cServer
	http.createServer(function(${1:request}, ${2:response}){
		${3:}
	}).listen(${4:8124});
snippet jpa
	JSON.parse(${1:'{"string":"of json"}});
snippet jst
	JSON.stringify(${1:{some:'object'}});
snippet clog
	console.log('${1:message}')
snippet mgdbConnect
	mongo_client.connect(url,{${1:useNewUrlParser:true}},function(err,db){
		if(err) throw err;
		console.log("mongoDB[${2:db_fun}] created");
		${3:}
		db.close();
	});
snippet mgdbUrl
	var url = "mongodb://localhost:27017/${1:db_fun}";
snippet mgdbCreateCollection
	var dbo = db.db("${1:db}");
	dbo.createCollection('${2:collection_name}',function(err,res){
		if(err)throw err;
		console.log("Collection[$2] created");
		${3:}
	});
snippet mgdbInsertOne
	var ${2:obj_name}={${3:key1}:${4:key1_value},${5:key2}:${6:key2_value}};
	dbo.collection("${1:collection_name}").insertOne($2,function(err,res){
		if(err) throw err;
		console.log("Collection[$1] insert $2 success");
		${0:}
	});
snippet mgdbInsertMany
	var ${2:obj_name}=[
		{${3:key1}:${4:key1_value},${5:key2}:${6:key2_value}},
		${7:........}
	];
	dbo.collection("${1:collection_name}").insertMany($2,function(err,res){
		if(err) throw err;
		console.log("Collection[$1] insert count + res.insertedCount);
		${0:}
	});
snippet mgdbFind
	var ${2:find_obj_str}={${3:key1}:${4:key1_value}};
	dbo.collection("${1:collection_name}").find($2.toArray(function(err,res){
		if(err) throw err;
		console.log(res);
		${0:}
	});
snippet mgdbUpdateOne
	var ${2:find_obj_str}={${4:key1}:${5:key1_value}};
	var ${3:update_obj_str}={$set:{${6:key1}:${7:key1_value}}};
	dbo.collection("${1:collection_name}").updateOne($2,$3,function(err,res){
		if(err) throw err;
		console.log("Collection[$2]update $3 success");
		${0:}
	});
snippet mgdbUpdateMany
	var ${2:find_obj_str}={${4:key1}:${5:key1_value}};
	var ${3:update_obj_str}={$set:{${6:key1}:${7:key1_value}}};
	dbo.collection("${1:collection_name}").updateMany($2,$3,function(err,res){
		if(err) throw err;
		console.log("Collection[$2]"+ res.result.nModified+"success");
		${0:}
	});
snippet mgdbDeleteOne
	var ${2:find_obj_str}={${3:key1}:${4:key1_value}};
	dbo.collection("${1:collection_name}").deleteOne($2,function(err,res){
		if(err) throw err;
		console.log("Collection[$1]delete $2 success");
		${0:}
	});
snippet mgdbDeleteMany
	var ${2:find_obj_str}={${3:key1}:${4:key1_value}};
	dbo.collection("${1:collection_name}").deleteMany($1,function(err,res){
		if(err) throw err;
		console.log("Collection[$2]"+ res.result.nModified+"success");
		${0:}
	});
snippet mgdbDeleteCollectionon
	dbo.collection("${1:collection_name}".drop(function(err,res){
		if(err) throw err;
		if(res)console.log("Collection[$1]");
		${0:}
	});
snippet mgdbcnt
	mongo_client.connect('mongodb://${1:localhost}/${2:collection}');
snippet mgfind
	${1:Model}.find({ ${2:}  }).all(function(${3:results}){
		${0:}
	});
snippet mgmodel
	mongoose.model('${1:Model}', {
	properties: [
		${2:'name'}
		],
		indexes: [ ${3:'name'}  ],
		cast: { ${4:}  }
	});
snippet netcs
	net.createServer(function(${1:socket}){
		$1.setEncoding("${2:utf8}");
		$1.on('data', function(data){
		});
		$1.on('end', function(){
		  
		});
	}).listen(${3:8124}, '${4:127.0.0.1}');
snippet req
	var $1 = require('${1:sys}');
snippet reqfs
	var fs = require('fs');
snippet reqhttp
	var http = require('http');
snippet reqio
	var io = require('socketio');
snippet reqmg
	var mongoose = require('mongoose').Mongoose;
snippet reqmgdbClient
	var mongo_client = require('mongodb').MongoClient;
snippet reqpath
	require.paths.unshift(${1:__dirname}${2:+'/lib/'});
snippet reqsys
	var sys =require('sys');
snippet ep
	var express =require('express');
	var app=express();
snippet reqvows
	var vows =require('vows');
	var assert =require('assert');
	
	vows.describe('${1:something}').addBatch({
		'${2:firstthing}':{
			topic:function(){
			}
		}
	}).export(module);
snippet resrender
	res.render('${1:template}', {
		locals:{
			${2:templatevars}
		}
	});
snippet setival
	setInterval(${1:callback}, ${2:delay}))
snippet settout
	setTimeout(${1:operation}, ${2:miliseconds}))
snippet sysinsp
	sys.inspect(${1:object}))
snippet socket
	var ${1:socket} = ${2:io}.listen(${3:app});
	
	$1.on('connection', function(client){
		client.on('message', function(${4:msg}){
			${5:}
		});
		client.on('disconnect', function(){
			${6:}
		});
	});
snippet rswhead
	response.writeHead(${1:200}, ${2:{'Content-Type':'text/plain'}});
snippet lhport
	localhost:${1:27017}
